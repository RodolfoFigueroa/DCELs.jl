var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DCELs","category":"page"},{"location":"#DCELs.jl","page":"Home","title":"DCELs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Doubly connected edge lists in Julia.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Getting the latest stable release is easy with Julia's integrated package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add DCELs","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DCELs]","category":"page"},{"location":"#DCELs.AbstractEdge","page":"Home","title":"DCELs.AbstractEdge","text":"AbstractEdge\n\nAbstract supertype for all edge objects.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.AbstractFace","page":"Home","title":"DCELs.AbstractFace","text":"AbstractFace\n\nAbstract supertype for all face objects.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.AbstractGeometry","page":"Home","title":"DCELs.AbstractGeometry","text":"AbstractGeometry\n\nAbstract supertype for all geometry objects.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.AbstractTessellation","page":"Home","title":"DCELs.AbstractTessellation","text":"AbstractTessellation\n\nAbstract supertype for all tessellations.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.AbstractVertex","page":"Home","title":"DCELs.AbstractVertex","text":"AbstractVertex\n\nAbstract supertype for all vertex objects.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.Edge","page":"Home","title":"DCELs.Edge","text":"Edge <: AbstractEdge\n\nEdge between two vertices.\n\nFields\n\nid::String: Unique ID.\nnext::Union{Edge, Nothing}`: Next edge alongside the corresponding face (counterclockwise).\nprev::Union{Edge, Nothing}`: Previous edge alongside the corresponding face (counterclockwise).\ntwin::Union{Edge, Nothing}`: Twin edge.\nprev: Vertex that the edge points to.\nface: Face bounded by the edge.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.Edge-Tuple{}","page":"Home","title":"DCELs.Edge","text":"Edge()\n\nCreate an Edge with a random UUID4 ID prefixed by \"E-\", and all other fields set to nothing.\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.Face","page":"Home","title":"DCELs.Face","text":"Face <: AbstractFace\n\nArea in the plane bounded by edges.\n\nFields\n\nid::String: Unique ID.\nedge::Union{Edge, Nothing}: Arbitrary edge that bounds this face.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.Face-Tuple{}","page":"Home","title":"DCELs.Face","text":"Face()\n\nCreate a Face with a random UUID4 ID prefixed by \"F-\", and edge=nothing.\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.GeometryError","page":"Home","title":"DCELs.GeometryError","text":"GeometryError(msg::String)\n\nGeometry is inconsistent.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.Tessellation","page":"Home","title":"DCELs.Tessellation","text":"Tessellation <: AbstractTessellation\n\nCollection of vertices, edges and faces.\n\nFields\n\nedges::Set{Edge}: Set of edges belonging to the tessellation.\nvertices::Set{Vertex}: Set of vertices.\nfaces::Set{Face}: Set of faces.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.Tessellation-Tuple{}","page":"Home","title":"DCELs.Tessellation","text":"Tessellation()\n\nCreate a Tessellation with no edges, vertices or faces.\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.Vertex","page":"Home","title":"DCELs.Vertex","text":"Vertex <: AbstractVertex\n\n2D point in the plane.\n\nFields\n\nid::String: Unique ID.\nx::Real: x coordinate.\ny::Real: y coordinate.\nedge::Union{Edge, Nothing}: Arbitrary edge that points towards this vertex.\n\n\n\n\n\n","category":"type"},{"location":"#DCELs.Vertex-Tuple{Real, Real}","page":"Home","title":"DCELs.Vertex","text":"Vertex(x::Real, y::Real)\n\nCreate a Vertex with a random UUID4 ID prefixed by \"V-\", with coordinates (x, y), and edge=nothing.\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.Vertex-Tuple{}","page":"Home","title":"DCELs.Vertex","text":"Vertex()\n\nCreate a Vertex with a random UUID4 ID prefixed by \"V-\", with coordinates (NaN, NaN), and edge=nothing.\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.connect-Tuple{AbstractTessellation, AbstractVertex, AbstractVertex}","page":"Home","title":"DCELs.connect","text":"connect(args...; kwargs...)\n\nConnect two vertices.\n\nArguments\n\ntess::AbstractTessellation: Tessellation to update.\nu::AbstractVertex: First vertex to connect.\nv::AbstractVertex: Second vertex to connect.\n\nKeywords\n\nsplit::Union{Bool, Nothing}=nothing: Whether connecting u and v will create a new face. If nothing, it will be determined automatically, at the cost of more operations.\n\nReturns\n\nh: The newly created edge from u to v.`\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.edge_loop-Tuple{AbstractEdge}","page":"Home","title":"DCELs.edge_loop","text":"edge_loop(start::AbstractEdge; reverse::Bool=false)\n\nYield all edges in the list [start, start.next, start.next.next, ..., start.prev]. If reverse=true, this will instead yield [start, start.prev, ..., start.next].\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.edge_path-Tuple{AbstractEdge, AbstractEdge}","page":"Home","title":"DCELs.edge_path","text":"edge_path(start::AbstractEdge, finish::AbstractEdge; reverse::Bool=false)\n\nYield all edges in the list [start, start.next, start.next.next, ..., finish.prev]. If start and finish do not bound the same face, this will never terminate.\n\nIf reverse=true, the order will be [start, start.prev, ..., finish.next].\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.edges-Tuple{AbstractFace}","page":"Home","title":"DCELs.edges","text":"edges(face::AbstractFace; reverse::Bool=false)\n\nYield all edges that bound face, in counterclockwise order (or clockwise if reverse=true).\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.edges-Tuple{AbstractVertex}","page":"Home","title":"DCELs.edges","text":"edges(vertex::AbstractVertex; reverse::Bool=false)\n\nYield all edges that point to vertex, in counterclockwise order (or clockwise if reverse=true).\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.faces-Tuple{AbstractEdge}","page":"Home","title":"DCELs.faces","text":"faces(edge::AbstractEdge; reverse::Bool=false)\n\nYield both faces that edge touches, starting by the left one (or right if reverse=true).\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.faces-Tuple{AbstractFace}","page":"Home","title":"DCELs.faces","text":"faces(face::AbstractFace; reverse::Bool=false)\n\nYield all faces that share an edge with face, in counterclockwise order (or clockwise if reverse=true).\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.faces-Tuple{AbstractVertex}","page":"Home","title":"DCELs.faces","text":"faces(vertex::AbstractVertex; reverse::Bool=false)\n\nYield all of the faces that touch vertex, in counterclockwise order (or clockwise if reverse=true).\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.find_outer_face-Tuple{AbstractTessellation}","page":"Home","title":"DCELs.find_outer_face","text":"find_outer_face(tess::AbstractTessellation)\n\nReturn the unbounded face of tess.\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.fix_faces!-Tuple{AbstractTessellation}","page":"Home","title":"DCELs.fix_faces!","text":"fix_faces!(tess::AbstractTessellation)\n\nCreate the missing faces between the edges of tess. It is assumed that the prev and next fields are consistent.\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.squeeze_edge-Tuple{AbstractVertex, AbstractEdge}","page":"Home","title":"DCELs.squeeze_edge","text":"squeeze_edge(vertex::AbstractVertex, edge::AbstractEdge)\n\nReturns an edge h such that h.dest = vertex, and if you rotate edge counterclockwise around vertex, the first edge you'll meet is h.\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.vertices-Tuple{AbstractEdge}","page":"Home","title":"DCELs.vertices","text":"vertices(edge::AbstractEdge; reverse::Bool=false)\n\nYield both endpoints of edge, starting at the destination (or origin if reverse=true).\n\n\n\n\n\n","category":"method"},{"location":"#DCELs.vertices-Tuple{AbstractFace}","page":"Home","title":"DCELs.vertices","text":"vertices(face::AbstractFace; reverse::Bool=false)\n\nYield all vertices that touch face, in counterclockwise order (or clockwise if reverse=true).\n\n\n\n\n\n","category":"method"}]
}
